import { NextResponse } from "next/server";

import User from "@/database/User";
import dbConnect from "@/lib/mongoose";

export async function GET(req: Request) {
  try {
    // ‚úÖ Metodo corretto per estrarre i searchParams dal URL
    const url = new URL(req.url);
    const token = url.searchParams.get("token");

    if (!token) {
      console.error("‚ùå Errore: Token non trovato nella query string");
      return NextResponse.json(
        { error: "‚ùå Token non valido" },
        { status: 400 },
      );
    }

    console.log("üì© Token ricevuto:", token);

    await dbConnect();
    const user = await User.findOne({ verificationToken: token });

    if (!user) {
      console.error("‚ùå Errore: Token non trovato nel database");
      return NextResponse.json(
        { error: "‚ùå Token non valido o gi√† usato" },
        { status: 400 },
      );
    }

    // ‚úÖ Se l'utente √® gi√† verificato, restituiamo un messaggio chiaro
    if (user.isVerified) {
      console.warn("‚ö†Ô∏è Utente gi√† verificato:", user.email);
      return NextResponse.json(
        { message: "‚ö†Ô∏è Email gi√† verificata!" },
        { status: 200 },
      );
    }

    // ‚úÖ Verifica l'utente e rimuovi il token
    user.isVerified = true;
    user.verificationToken = undefined;
    await user.save();

    console.log("‚úÖ Utente verificato con successo:", user.email);

    return NextResponse.json(
      { message: "‚úÖ Email verificata con successo!" },
      { status: 200 },
    );
  } catch (error) {
    console.error("‚ùå Errore nel server:", error);
    return NextResponse.json(
      { error: "‚ùå Errore interno del server" },
      { status: 500 },
    );
  }
}
